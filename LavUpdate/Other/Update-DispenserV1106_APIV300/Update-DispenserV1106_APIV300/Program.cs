using Newtonsoft.Json.Linq;
using Npgsql;
using System;
using System.Diagnostics;
using System.IO;
using System.Threading;

namespace Update_DispenserV1106_APIV300
{
    public class Program
    {
        static string CurrentDirectory = "";
        static string IP_Address = "";
        static void Main(string[] args)
        {
            Console.WriteLine($"{DateTime.Now} : Program Update DispenserV1.10.6 && APIV.3.0.0 version1.0.4");
            Console.WriteLine($"{DateTime.Now} : Program is Process Start");

            //if (Condition_Update())
            if (true)
            {
                //Extract file
                //ExecuteCommand($"echo 'muj,nv,ufvdw,h' | sudo -S tar -xzf /home/lavender/Update-DispenserV1106_APIV300/LavenderTransfer/File_Transfer/PackageUpdate.tar.gz -C /home/lavender/Update-DispenserV1106_APIV300/LavenderTransfer/File_Transfer");
                //UpdateDispenser();
                //UpdateAPI();
                Update_LavenderWebConfig();


            }
            else
            {
                Console.WriteLine($"{DateTime.Now} : Can't update programs because not math condition in Update.");
            }

            Console.WriteLine($"{DateTime.Now} : Program is Process End");
            Thread.Sleep(3000);
        }

        /*public static void Update_LavenderWebConfig()
        {
            try
            {
                //CREATE AND GRANT TABLE
                char dubleCode = '"';
                string cm = "";
                string msg = "";
                cm = "CREATE TABLE IF NOT EXISTS lavender.lavender_api ( api_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( CYCLE INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),  api_name text NOT NULL, PRIMARY KEY(api_id));";
                msg = "PGPASSWORD=" + dubleCode + "gdH[,yogvkw;hg]pmyh'fvdw,h" + dubleCode + " psql -h localhost -U postgres -p 5432 -d LAVENDERDB -c " + dubleCode + $"{cm}" + dubleCode;
                ExecuteCommand2(msg);
                *//*pgSQL_NonQuery(cm);
                cm = "ALTER TABLE IF EXISTS lavender.lavender_api OWNER to postgres";
                pgSQL_NonQuery(cm);*//*
                //cm = "GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE lavender.lavender_api TO lav_application_role";
                //pgSQL_NonQuery(cm);
                //cm = "GRANT ALL ON TABLE lavender.lavender_api TO postgres";
                //pgSQL_NonQuery(cm);

                //INSERT DATA INTO TABLE
                cm = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('Command');";
                pgSQL_NonQuery(cm);
                cm = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('GetGrade');";
                pgSQL_NonQuery(cm);
                cm = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('GetPos');";
                pgSQL_NonQuery(cm);
                cm = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('GetPrice');";
                pgSQL_NonQuery(cm);
                cm = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('GetRealtimeValue');";
                pgSQL_NonQuery(cm);
                cm = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('GetStack');";
                pgSQL_NonQuery(cm);
                cm = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('GetTanks');";
                pgSQL_NonQuery(cm);
                cm = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('GetTotalizer');";
                pgSQL_NonQuery(cm);
                cm = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('GetTransaction');";
                pgSQL_NonQuery(cm);
                cm = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('Initialize');";
                pgSQL_NonQuery(cm);
                cm = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('LavenderSetting');";
                pgSQL_NonQuery(cm);
                cm = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('Login_Logout');";
                pgSQL_NonQuery(cm);
                cm = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('ManageAPI');";
                pgSQL_NonQuery(cm);
                cm = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('Setting');";
                pgSQL_NonQuery(cm);
                cm = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('Support');";
                pgSQL_NonQuery(cm);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }*/

        static void pgSQL_NonQuery(string cm)
        {
            try
            {
                CurrentDirectory = Directory.GetCurrentDirectory();
                StreamReader r = new StreamReader(CurrentDirectory + @"/ConnectionString.json");
                string jsonString = r.ReadToEnd();
                JObject rss = JObject.Parse(jsonString);
                IP_Address = (string)rss["ConnectionStrings"]["ConnectionString"];
                using (NpgsqlConnection conn = new NpgsqlConnection($"User ID=postgres;Password=8545;Port=5432;Host={IP_Address};Database=LAVENDERDB;"))
                {
                    conn.Open();
                    NpgsqlCommand command = new NpgsqlCommand(cm, conn);
                    command.ExecuteNonQueryAsync();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        public static void UpdateDispenser()
        {
            //Dispenser
            if (versionDispenser() != "1.10.6")
            {
                //Stop service dispenser
                ExecuteCommand($"echo 'muj,nv,ufvdw,h' | sudo -S systemctl stop lavender-dispenser");
                //Backup file
                ExecuteCommand($"echo 'muj,nv,ufvdw,h' | sudo -S mv LavenderDispenser LavenderDispenser_BK_V{versionDispenser().Replace(".", "")}");
                //Copy file
                ExecuteCommand($"echo 'muj,nv,ufvdw,h' | sudo -S cp -r /home/lavender/Update-DispenserV1106_APIV300/LavenderTransfer/File_Transfer/PackageUpdate/LavenderDispenser /usr/share");
                //Start service dispenser
                ExecuteCommand($"echo 'muj,nv,ufvdw,h' | sudo -S systemctl start lavender-dispenser");
                Console.WriteLine("Update Dispenser");
            }
            else
            {
                //Write log 
                Console.WriteLine("Can,t update Dispenser");
            }
        }
        public static void UpdateAPI()
        {
            //API
            if (versionAPI() != "3.0.0")
            {
                Console.WriteLine("Can,t update API");
            }
            else
            {
                //Write log
                Console.WriteLine("Can,t update API");
            }
        }

        public static void ExecuteCommand2(string command)
        {
            try
            {
                Process proc = new Process();
                proc.StartInfo.FileName = "/bin/bash";
                proc.StartInfo.Arguments = "-c \" " + command + " \"";
                proc.StartInfo.UseShellExecute = false;
                proc.StartInfo.RedirectStandardOutput = false;
                proc.Start();


            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        public static string ExecuteCommand(string command)
        {
            try
            {
                Process proc = new Process();
                proc.StartInfo.FileName = "/bin/bash";
                proc.StartInfo.Arguments = "-c \" " + command + " \"";
                proc.StartInfo.UseShellExecute = false;
                proc.StartInfo.RedirectStandardOutput = true;
                proc.Start();

                string result = proc.StandardOutput.ReadToEnd();
                proc.WaitForExit();

                return result;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return "";
            }
        }

        static string pgSQL_Query(string cm)
        {
            try
            {
                string result = "";
                CurrentDirectory = Directory.GetCurrentDirectory();
                StreamReader r = new StreamReader(CurrentDirectory + @"\ConnectionString.json");
                string jsonString = r.ReadToEnd();
                JObject rss = JObject.Parse(jsonString);
                IP_Address = (string)rss["ConnectionStrings"]["ConnectionString"];
                //using (NpgsqlConnection conn = new NpgsqlConnection($"Server={IP_Address};User Id=postgres;Password=8545;Database=LAVENDERDB;"))
                using (NpgsqlConnection conn = new NpgsqlConnection($"User ID=postgres;Password=\"gdH[,yogvkw;hg]pmyh'fvdw,h\";Port=5432;Host={IP_Address};Database=LAVENDERDB;"))
                {
                    conn.Open();
                    NpgsqlCommand command = new NpgsqlCommand(cm, conn);
                    result = command.ExecuteScalar().ToString();
                }
                return result;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return "";
            }
        }

        static bool Condition_Update()
        {
            try
            {
                string cm = "";
                string result = "";
                string pumps_Count = "";
                string pos_shift = "";
                string pos_status = "";
                string pumps_Status_Unknown = "";
                string pumps_Status_Temp_Stopped = "";

                //Get Pump Count
                cm = "SELECT COUNT(pump_id) FROM lavender.pumps";
                pumps_Count = pgSQL_Query(cm);

                //Get Pump_Count[Unknown]
                cm = "SELECT COUNT(pump_id) FROM lavender.pumps_real_time WHERE status = 'Unknown'";
                pumps_Status_Unknown = pgSQL_Query(cm);

                //Get Pump_Count[Temp Stopped]
                cm = "SELECT COUNT(pump_id) FROM lavender.pumps_real_time WHERE status = 'Temp Stopped'";
                pumps_Status_Temp_Stopped = pgSQL_Query(cm);

                //Get pos_status
                cm = "SELECT status FROM lavender.pos_status WHERE history_id =(SELECT max(history_id) FROM lavender.pos_status)";
                pos_status = pgSQL_Query(cm);

                //Get pos_shift
                cm = "SELECT status FROM lavender.pos_shift WHERE shift_id =(SELECT max(shift_id) FROM lavender.pos_shift)";
                pos_shift = pgSQL_Query(cm);

                if (pumps_Status_Unknown == pumps_Count || pumps_Status_Temp_Stopped == pumps_Count || pos_status == "0" || pos_shift == "0")
                    return true;
                return false;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return false;
            }
        }

        static string versionDispenser()
        {
            //Get Sevice Dispenser
            string cm = "SELECT value FROM lavender.site_config where key = 'Dispenser_Version'";
            string SeviceDispenser = pgSQL_Query(cm);
            return SeviceDispenser;
        }

        static string versionAPI()
        {
            //Get Sevice API
            string cm = "SELECT value FROM lavender.site_config where key = 'API_Version'";
            string SeviceAPI = pgSQL_Query(cm);
            return SeviceAPI;
        }







        public static void Update_LavenderWebConfig()
        {
            try
            {
                CurrentDirectory = Directory.GetCurrentDirectory();
                StreamReader r = new StreamReader(CurrentDirectory + @"/ConnectionString.json");
                string jsonString = r.ReadToEnd();
                JObject rss = JObject.Parse(jsonString);
                IP_Address = (string)rss["ConnectionStrings"]["ConnectionString"];
                var con = new NpgsqlConnection($"User ID=postgres;Password=8545;Port=5432;Host={IP_Address};Database=LAVENDERDB;");
                con.Open();
                using var command = new NpgsqlCommand();
                command.Connection = con;

                //CREATE AND GRANT TABLE
                command.CommandText = "CREATE TABLE IF NOT EXISTS lavender.lavender_api ( api_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( CYCLE INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),  api_name text NOT NULL, PRIMARY KEY(api_id));";
                command.ExecuteNonQuery();
                command.CommandText = "ALTER TABLE IF EXISTS lavender.lavender_api OWNER to postgres";
                command.ExecuteNonQuery();
                command.CommandText = "GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE lavender.lavender_api TO lav_application_role";
                command.ExecuteNonQuery();
                command.CommandText = "GRANT ALL ON TABLE lavender.lavender_api TO postgres";
                command.ExecuteNonQuery();

                //INSERT DATA INTO TABLE
                command.CommandText = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('Command');";
                command.ExecuteNonQuery();
                command.CommandText = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('GetGrade');";
                command.ExecuteNonQuery();
                command.CommandText = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('GetPos');";
                command.ExecuteNonQuery();
                command.CommandText = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('GetPrice');";
                command.ExecuteNonQuery();
                command.CommandText = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('GetRealtimeValue');";
                command.ExecuteNonQuery();
                command.CommandText = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('GetStack');";
                command.ExecuteNonQuery();
                command.CommandText = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('GetTanks');";
                command.ExecuteNonQuery();
                command.CommandText = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('GetTotalizer');";
                command.ExecuteNonQuery();
                command.CommandText = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('GetTransaction');";
                command.ExecuteNonQuery();
                command.CommandText = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('Initialize');";
                command.ExecuteNonQuery();
                command.CommandText = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('LavenderSetting');";
                command.ExecuteNonQuery();
                command.CommandText = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('Login_Logout');";
                command.ExecuteNonQuery();
                command.CommandText = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('ManageAPI');";
                command.ExecuteNonQuery();
                command.CommandText = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('Setting');";
                command.ExecuteNonQuery();
                command.CommandText = $"INSERT INTO lavender.lavender_api(api_name) VALUES ('Support');";
                command.ExecuteNonQuery();


            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}
